# WIP
# input args
# 1: name of input archive file, as downloaded from Moodle
# 2: name of pdf file the is (supposed to be) in the file

# The archive file is assumed to decompress and generate 1 folder per student.
# Inside of each folder, it is assumed to be a pdf file holding filled forms.
# This script will move the strings in each file to a csv nice table.

# This relies on pdfkt, that can output the fields content:
# pdftk file.pdf dump_data_fields > file.txt

# TODO: handle when no FieldValue string (and no FieldName)

# TODO: change name handling. Now issues when first name or last name has spaces.
# Just get both, and replace spaces with '_', and use that in file name 

logfile=pdfforms2table.log
outfile=pdfforms2table.csv

if [ -f $logfile ]; then rm $logfile; fi
mkdir -p /tmp/pdfforms2table/


#--------------------------------------------
function eraseFile()
{
	if [ -f "$1" ]
	then
		rm "$1"
	fi
}
#--------------------------------------------
function reset()
{
	echo "*** reset c=$c fname=-$fname- fvalue=-$fvalue-"
	outcsv=/tmp/pdfforms2table/out_$nameL.csv
#	echo "outcsv=$outcsv"
	if ! [ "$fvalue" = "" ]
	then
		((c+=1))
		if [ $c2 = 0 ]
		then
			echo "$c;$fname;$fvalue" >>$outcsv
		else
			echo "$fvalue" >>$outcsv
		fi
		fname=
		fvalue=
	fi
}

#--------------------------------------------
# split string received as argument into an array, delimiter = ":"
function splitString()
{
#IN="$1"
#echo "IN=$IN"
#set -- "$IN" 
#IFS=":"; declare -a arr=($*) 
#echo "ALL:-${arr[@]}-" 
#echo "0:-${arr[0]}-" 
#echo "1:-${arr[1]}-" 

# this:
	str=$1
	IFS=':' read -ra arr <<<"$str"
#	echo "splitString: str=-$str- arr 0=-${arr[0]}- arr 1=-${arr[1]}-"
# does not work, apparently because it is embedded into another "read" command

# This
#		arr=(${IN//:/ })
# was used before, but appears to have strange behavior
# example:
# IN="FieldValue: * * * * * date&gt;cron-date.txt"
# TODO: investigate this
# source: https://stackoverflow.com/a/5257398/193789
}
#--------------------------------------------
function processData()
{
	eraseFile /tmp/pdfforms2table/out_$nameL.csv
	fname=
	fvalue=
	fn=$1
	echo "------------processData fn=$fn"
	while read IN
	do
		splitString "$IN"
		if [ "${arr[0]}" = "---" ]
		then
			reset
		else
#			echo "processData(2): current field=${arr[0]}"
			if [ "${arr[0]}" = "FieldName" ]
			then
				fname="${arr[1]}"
			fi
			if [ "${arr[0]}" = "FieldValue" ]
			then
#				test needed because sometimes there are 2 lines for FieldValue, so the second erases the first one
				if [ ${#fvalue} = 0 ]
				then
					fvalue="${arr[1]}"
				fi
			fi
#			echo "processData(3): fname=$fname fvalue=$fvalue"
		fi
		
	done < $fn
}
#--------------------------------------------
function splitstr()
{
	IFS=$2 read -ra tab <<< "$1"
}
#--------------------------------------------
function usage()
{
	echo "pdfforms2table <archive> <pdffile>"
	echo "A utility to extract student works from a Moodle downloaded archive"
	echo "holding a pdf file with filled form fields and assemble these into a single tabular CSV file"
	echo "manual: https://github.com/skramm/utility_scripts"
}
#--------------------------------------------
function replaceEntities()
{
	in=$1
	out=$2
	cp $in $out
	sed --in-place 's/&gt;/>/g' $out
	sed --in-place 's/&apos;/'\''/g' $out
	sed --in-place 's/&quot;/'\"'/g' $out
	sed --in-place 's/&#232;/è/g' $out
	sed --in-place 's/&#233;/é/g' $out
	sed --in-place 's/&#224;/à/g' $out
	sed --in-place 's/&#192;/À/g' $out
	grep "&#" $out
	rv=$?
	echo "grep rv=$rv"
}
#--------------------------------------------
# program start

if [ -z "$1" ] || [ "$1" = "-h" ]
then
	usage
	exit 0
fi
archfn=$1

if [ -z "$2" ]
then
	echo "error, missing pdf file name"
	exit 1
fi
pdffn=$2

if [ ! -f "$1" ]
then
	echo "error, can't find file $1"
	exit 1
fi

echo " -Step 1: unzipping"
unzip -o "$archfn" 1>/tmp/pdfforms2table/unzip.stdout 2>/tmp/pdfforms2table/unzip.stderr
rv=$?
if [ $rv != 0 ]
then
	echo "Error: unzip program failed with value $rv, exiting..."
	exit 2
fi

echo " -Step 2: iterating on folders"
c2=0
for d in ./*/
do
	d=${d%*/}      # remove the trailing "/"
	dir="${d##*/}"    # print everything after the final "/"
	echo "Processing $dir">>$logfile
	echo "Processing $dir"
	splitstr "$dir" _
#	echo "A: tab[0]=-${tab[0]}- tab[1]=-${tab[1]-}" 
	splitstr "${tab[0]}" " "
	nameF=${tab[0]}
	nameL=${tab[1]}
	echo "nameL=$nameL"
	if [ ! -f "$dir/$pdffn" ]
	then
		echo "File $pdffn missing for $nameF $nameL">>$logfile
	else
		if [ $c2 = 0 ]
		then
			set_idx=";;1"
			set_names=";;$nameL"
			set_files="/tmp/pdfforms2table/out_$nameL.csv"
		else
			c_idx=$((c2+1))
			set_idx="$set_idx;$c_idx"
			set_files="$set_files /tmp/pdfforms2table/out_$nameL.csv"
			set_names="$set_names;$nameL"
		fi
		c=0
		pdftk "$dir/$pdffn" dump_data_fields > /tmp/pdfforms2table/out_$nameL.txt
		replaceEntities /tmp/pdfforms2table/out_$nameL.txt /tmp/pdfforms2table/out2_$nameL.txt
		if [ $rv = 0 ]
		then
			echo "Found illegal character in file !">>$logfile
		else
			processData /tmp/pdfforms2table/out2_$nameL.txt
			((c2+=1))
		fi
	fi
done
echo "set_idx=$set_idx"
echo "set_files=$set_files"
echo "set_names=$set_names"

echo " -Step 3: generating csv file"
out2=/tmp/pdfforms2table/out.csv
echo "$set_idx" >$out2
echo "$set_names" >>$out2
paste -d ";" $set_files >>$out2

cp $out2 $outfile


